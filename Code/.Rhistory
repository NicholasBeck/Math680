summary(fit2)
est <- sum(log.m1 - log.m2)/n
est
std.div <- sum((log.m1 - log.m2)^2)/n - (est)^2
std.div
z <- sqrt(n)*est/sqrt(std.div)
n<- 1000
my.data <- matrix(nrow = n, ncol = 2)
my.data[, 1] <- c(rep(1, 190), rep(4, 160), rep(7, 650))
prob <- expit(-1.6 + 1*as.numeric(my.data[, 1] > 3))
res <- NULL
for(i in 1:1000){
my.data[, 2] <- rbinom(n, 1, prob)
fit1 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 3)) , family = binomial)
fit2 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 6)) , family = binomial)
pi.hat <- fit1$fitted.values
phi.hat <- fit2$fitted.values
log.m1 <- my.data[, 2]*log(pi.hat) + (1-my.data[, 1])*log(1-pi.hat)
log.m2 <- my.data[, 2]*log(phi.hat) + (1-my.data[, 1])*log(1-phi.hat)
est <- sum(log.m1 - log.m2)/n
std.div <- sum((log.m1 - log.m2)^2)/n - (est)^2
z <- sqrt(n)*est/sqrt(std.div)
res[i] <- as.numeric(abs(z) > 1.96)
}
mean(res)
n<- 100
my.data <- matrix(nrow = n, ncol = 2)
my.data[, 1] <- c(rep(1, 19), rep(4, 16), rep(7, 65))
prob <- expit(-1.6 + 1*as.numeric(my.data[, 1] > 3))
res <- NULL
for(i in 1:1000){
my.data[, 2] <- rbinom(n, 1, prob)
fit1 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 3)) , family = binomial)
fit2 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 6)) , family = binomial)
pi.hat <- fit1$fitted.values
phi.hat <- fit2$fitted.values
log.m1 <- my.data[, 2]*log(pi.hat) + (1-my.data[, 1])*log(1-pi.hat)
log.m2 <- my.data[, 2]*log(phi.hat) + (1-my.data[, 1])*log(1-phi.hat)
est <- sum(log.m1 - log.m2)/n
std.div <- sum((log.m1 - log.m2)^2)/n - (est)^2
z <- sqrt(n)*est/sqrt(std.div)
res[i] <- as.numeric(abs(z) > 1.96)
}
mean(res)
n<- 100
my.data <- matrix(nrow = n, ncol = 2)
my.data[, 1] <- c(rep(1, 19), rep(4, 16), rep(7, 65))
prob <- expit(-1.6 + 1*as.numeric(my.data[, 1] > 3))
res <- NULL
for(i in 1:1000){
my.data[, 2] <- rbinom(n, 1, prob)
fit1 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 3)) , family = binomial)
fit2 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 6)) , family = binomial)
pi.hat <- fit1$fitted.values
phi.hat <- fit2$fitted.values
log.m1 <- my.data[, 2]*log(pi.hat) + (1-my.data[, 1])*log(1-pi.hat)
log.m2 <- my.data[, 2]*log(phi.hat) + (1-my.data[, 1])*log(1-phi.hat)
est <- sum(log.m1 - log.m2)/n
std.div <- sum((log.m1 - log.m2)^2)/n - (est)^2
z <- sqrt(n)*est/sqrt(std.div)
res[i] <- as.numeric(z > 1.67)
}
mean(res)
n<- 1000
my.data <- matrix(nrow = n, ncol = 2)
my.data[, 1] <- c(rep(1, 190), rep(4, 160), rep(7, 650))
prob <- expit(-1.6 + 1*as.numeric(my.data[, 1] > 3))
res <- NULL
for(i in 1:1000){
my.data[, 2] <- rbinom(n, 1, prob)
fit1 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 3)) , family = binomial)
fit2 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 6)) , family = binomial)
pi.hat <- fit1$fitted.values
phi.hat <- fit2$fitted.values
log.m1 <- my.data[, 2]*log(pi.hat) + (1-my.data[, 1])*log(1-pi.hat)
log.m2 <- my.data[, 2]*log(phi.hat) + (1-my.data[, 1])*log(1-phi.hat)
est <- sum(log.m1 - log.m2)/n
std.div <- sum((log.m1 - log.m2)^2)/n - (est)^2
z <- sqrt(n)*est/sqrt(std.div)
res[i] <- as.numeric(z > 1.67)
}
mean(res)
n<- 10000
my.data <- matrix(nrow = n, ncol = 2)
my.data[, 1] <- c(rep(1, 1900), rep(4, 1600), rep(7, 6500))
prob <- expit(-1.6 + 1*as.numeric(my.data[, 1] > 3))
res <- NULL
for(i in 1:1000){
my.data[, 2] <- rbinom(n, 1, prob)
fit1 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 3)) , family = binomial)
fit2 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 6)) , family = binomial)
pi.hat <- fit1$fitted.values
phi.hat <- fit2$fitted.values
log.m1 <- my.data[, 2]*log(pi.hat) + (1-my.data[, 1])*log(1-pi.hat)
log.m2 <- my.data[, 2]*log(phi.hat) + (1-my.data[, 1])*log(1-phi.hat)
est <- sum(log.m1 - log.m2)/n
std.div <- sum((log.m1 - log.m2)^2)/n - (est)^2
z <- sqrt(n)*est/sqrt(std.div)
res[i] <- as.numeric(z > 1.67)
}
mean(res)
z
n<- 1000
my.data <- matrix(nrow = n, ncol = 2)
my.data[, 1] <- c(rep(1, 190), rep(4, 160), rep(7, 650))
prob <- expit(-1.6 + 1*as.numeric(my.data[, 1] > 3))
res <- NULL
for(i in 1:1000){
my.data[, 2] <- rbinom(n, 1, prob)
fit1 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 3)) , family = binomial)
fit2 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 6)) , family = binomial)
pi.hat <- fit1$fitted.values
phi.hat <- fit2$fitted.values
log.m1 <- my.data[, 2]*log(pi.hat) + (1-my.data[, 1])*log(1-pi.hat)
log.m2 <- my.data[, 2]*log(phi.hat) + (1-my.data[, 1])*log(1-phi.hat)
est <- sum(log.m1 - log.m2)/n
std.div <- sum((log.m1 - log.m2)^2)/n - (est)^2
z <- sqrt(n)*est/sqrt(std.div)
res[i] <- as.numeric(z > 1.67)
}
mean(res)
my.data[, 1] <- c(rep(1, 19), rep(4, 16), rep(7, 65))
table(my.data[,1])
n<- 100
my.data <- matrix(nrow = n, ncol = 2)
my.data[, 1] <- c(rep(1, 19), rep(4, 16), rep(7, 65))
prob <- expit(-1.6 + 1*as.numeric(my.data[, 1] > 3))
table(my.data[,1])
res <- NULL
my.data[, 2] <- rbinom(n, 1, prob)
table(my.data[,1], my.data[, 2])
table(my.data[,1], my.data[, 2])[1]
table(my.data[,1], my.data[, 2])[1, 2]
table(my.data[,1], my.data[, 2])[6]
n<- 100
my.data <- matrix(nrow = n, ncol = 2)
my.data[, 1] <- c(rep(1, 19), rep(4, 16), rep(7, 65))
prob <- expit(-1.6 + 1*as.numeric(my.data[, 1] > 3))
res <- NULL
for(i in 1:1000){
bad <- FALSE
my.data[, 2] <- rbinom(n, 1, prob)
for(j in 1:6){
if((table(my.data[,1], my.data[, 2])[j] < 5)){
bad <- TRUE
}
}
if(bad <- FALSE){
fit1 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 3)) , family = binomial)
fit2 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 6)) , family = binomial)
pi.hat <- fit1$fitted.values
phi.hat <- fit2$fitted.values
log.m1 <- my.data[, 2]*log(pi.hat) + (1-my.data[, 1])*log(1-pi.hat)
log.m2 <- my.data[, 2]*log(phi.hat) + (1-my.data[, 1])*log(1-phi.hat)
est <- sum(log.m1 - log.m2)/n
std.div <- sum((log.m1 - log.m2)^2)/n - (est)^2
z <- sqrt(n)*est/sqrt(std.div)
res[i] <- as.numeric(z > 1.65)
}else{
i <- i -1
}
}
mean(res)
res <- NULL
for(i in 1:1000){
bad <- FALSE
my.data[, 2] <- rbinom(n, 1, prob)
for(j in 1:6){
if((table(my.data[,1], my.data[, 2])[j] < 5)){
bad <- TRUE
}
}
if(bad == FALSE){
fit1 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 3)) , family = binomial)
fit2 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 6)) , family = binomial)
pi.hat <- fit1$fitted.values
phi.hat <- fit2$fitted.values
log.m1 <- my.data[, 2]*log(pi.hat) + (1-my.data[, 1])*log(1-pi.hat)
log.m2 <- my.data[, 2]*log(phi.hat) + (1-my.data[, 1])*log(1-phi.hat)
est <- sum(log.m1 - log.m2)/n
std.div <- sum((log.m1 - log.m2)^2)/n - (est)^2
z <- sqrt(n)*est/sqrt(std.div)
res[i] <- as.numeric(z > 1.65)
}else{
i <- i -1
}
}
mean(res)
res <- NULL
for(i in 1:1000){
bad <- FALSE
my.data[, 2] <- rbinom(n, 1, prob)
for(j in 1:6){
if((table(my.data[,1], my.data[, 2])[j] < 5)){
bad <- TRUE
}
}
if(bad == FALSE){
fit1 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 3)) , family = binomial)
fit2 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 6)) , family = binomial)
pi.hat <- fit1$fitted.values
phi.hat <- fit2$fitted.values
log.m1 <- my.data[, 2]*log(pi.hat) + (1-my.data[, 1])*log(1-pi.hat)
log.m2 <- my.data[, 2]*log(phi.hat) + (1-my.data[, 1])*log(1-phi.hat)
est <- sum(log.m1 - log.m2)/n
std.div <- sum((log.m1 - log.m2)^2)/n - (est)^2
z <- sqrt(n)*est/sqrt(std.div)
res[i] <- as.numeric(z > 1.65)
}else{
i <- i -1
}
}
res
res
if(res != NA)
{}
??NA
is.na(mean)
is.na(res)
is.na(res)[]
is.na(res[])
!is.na(res)
! is.na(res)
if(! is.na(res))
{res[]}
{res}
if(! is.na(res)){res}
res2 <- NULL
count <- 1
for (i in 1:1000){
if(! is.na(res[i])){
res2[count]< res[i]
count <- count + 1
}
}
mean(res2)
res2
for (i in 1:1000){
if(! is.na(res[i])){
res2[count]< res[i]
count <- count + 1
}
}
res
res2
is.na(res[i])
res[1000]
res[999]
res[912]
is.na(res[912])
! is.na(res[912])
! is.na(res[i])
res2 <- NULL
count <- 1
for (i in 1:1000){
if(! is.na(res[i])){
res2[count]<- res[i]
count <- count + 1
}
}
mean(res2)
res <- NULL
for(i in 1:2000){
bad <- FALSE
my.data[, 2] <- rbinom(n, 1, prob)
for(j in 1:6){
if((table(my.data[,1], my.data[, 2])[j] < 5)){
bad <- TRUE
}
}
if(bad == FALSE){
fit1 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 3)) , family = binomial)
fit2 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 6)) , family = binomial)
pi.hat <- fit1$fitted.values
phi.hat <- fit2$fitted.values
log.m1 <- my.data[, 2]*log(pi.hat) + (1-my.data[, 1])*log(1-pi.hat)
log.m2 <- my.data[, 2]*log(phi.hat) + (1-my.data[, 1])*log(1-phi.hat)
est <- sum(log.m1 - log.m2)/n
std.div <- sum((log.m1 - log.m2)^2)/n - (est)^2
z <- sqrt(n)*est/sqrt(std.div)
res[i] <- as.numeric(abs(z) > 1.96)
}else{
}
}
res2 <- NULL
count <- 1
for (i in 1:2000){
if(! is.na(res[i])){
res2[count]<- res[i]
count <- count + 1
}
}
mean(res2)
res <- NULL
for(i in 1:2000){
bad <- FALSE
my.data[, 2] <- rbinom(n, 1, prob)
for(j in 1:6){
if((table(my.data[,1], my.data[, 2])[j] < 5)){
bad <- TRUE
}
}
if(bad == FALSE){
fit1 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 3)) , family = binomial)
fit2 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 6)) , family = binomial)
pi.hat <- fit1$fitted.values
phi.hat <- fit2$fitted.values
log.m1 <- my.data[, 2]*log(pi.hat) + (1-my.data[, 1])*log(1-pi.hat)
log.m2 <- my.data[, 2]*log(phi.hat) + (1-my.data[, 1])*log(1-phi.hat)
est <- sum(log.m1 - log.m2)/n
std.div <- sum((log.m1 - log.m2)^2)/n - (est)^2
z <- sqrt(n)*est/sqrt(std.div)
res[i] <- as.numeric(z > 1.65)
}else{
}
}
res2 <- NULL
count <- 1
for (i in 1:2000){
if(! is.na(res[i])){
res2[count]<- res[i]
count <- count + 1
}
}
mean(res2)
res <- NULL
for(i in 1:3000){
bad <- FALSE
my.data[, 2] <- rbinom(n, 1, prob)
for(j in 1:6){
if((table(my.data[,1], my.data[, 2])[j] <= 5)){
bad <- TRUE
}
}
if(bad == FALSE){
fit1 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 3)) , family = binomial)
fit2 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 6)) , family = binomial)
pi.hat <- fit1$fitted.values
phi.hat <- fit2$fitted.values
log.m1 <- my.data[, 2]*log(pi.hat) + (1-my.data[, 1])*log(1-pi.hat)
log.m2 <- my.data[, 2]*log(phi.hat) + (1-my.data[, 1])*log(1-phi.hat)
est <- sum(log.m1 - log.m2)/n
std.div <- sum((log.m1 - log.m2)^2)/n - (est)^2
z <- sqrt(n)*est/sqrt(std.div)
res[i] <- as.numeric(abs(z) > 1.96)
}else{
}
}
res2 <- NULL
count <- 1
for (i in 1:2000){
if(! is.na(res[i])){
res2[count]<- res[i]
count <- count + 1
}
}
mean(res2)
res <- NULL
for(i in 1:3000){
bad <- FALSE
my.data[, 2] <- rbinom(n, 1, prob)
for(j in 1:6){
if((table(my.data[,1], my.data[, 2])[j] <= 6)){
bad <- TRUE
}
}
if(bad == FALSE){
fit1 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 3)) , family = binomial)
fit2 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 6)) , family = binomial)
pi.hat <- fit1$fitted.values
phi.hat <- fit2$fitted.values
log.m1 <- my.data[, 2]*log(pi.hat) + (1-my.data[, 1])*log(1-pi.hat)
log.m2 <- my.data[, 2]*log(phi.hat) + (1-my.data[, 1])*log(1-phi.hat)
est <- sum(log.m1 - log.m2)/n
std.div <- sum((log.m1 - log.m2)^2)/n - (est)^2
z <- sqrt(n)*est/sqrt(std.div)
res[i] <- as.numeric(abs(z) > 1.96)
}else{
}
}
res2 <- NULL
count <- 1
for (i in 1:2000){
if(! is.na(res[i])){
res2[count]<- res[i]
count <- count + 1
}
}
mean(res2)
my.data[, 1] <- c(rep(1, 19), rep(4, 16), rep(7, 65))
prob <- expit(-1.6 + 1*as.numeric(my.data[, 1] > 3))
res <- NULL
for(i in 1:3000){
bad <- FALSE
my.data[, 2] <- rbinom(n, 1, prob)
for(j in 1:6){
if((table(my.data[,1], my.data[, 2])[j] <= 5)){
bad <- TRUE
}
}
if(bad == FALSE){
fit1 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 3)) , family = binomial)
fit2 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 6)) , family = binomial)
pi.hat <- fit1$fitted.values
phi.hat <- fit2$fitted.values
log.m1 <- my.data[, 2]*log(pi.hat) + (1-my.data[, 1])*log(1-pi.hat)
log.m2 <- my.data[, 2]*log(phi.hat) + (1-my.data[, 1])*log(1-phi.hat)
est <- sum(log.m1 - log.m2)/n
std.div <- sum((log.m1 - log.m2)^2)/n - (est)^2
z <- sqrt(n)*est/sqrt(std.div)
res[i] <- as.numeric(abs(z) > 1.96)
}else{
}
}
res2 <- NULL
count <- 1
for (i in 1:2000){
if(! is.na(res[i])){
res2[count]<- res[i]
count <- count + 1
}
}
mean(res2)
set.seed(15239201)
n <- 100
my.data <- matrix(nrow = n, ncol = 2)
my.data[, 1] <- c(rep(1, 19), rep(4, 16), rep(7, 65))
#prob <- expit(-2 + my.data[, 2]*0.01 + as.numeric(my.data[, 2] > 3))
prob <- expit(-1.6 + 1*as.numeric(my.data[, 1] > 3))
my.data[, 2] <- rbinom(n, 1, prob)
fit1 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 3)) , family = binomial)
fit2 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 6)) , family = binomial)
pi.hat <- fit1$fitted.values
phi.hat <- fit2$fitted.values
log.m1 <- my.data[, 2]*log(pi.hat) + (1-my.data[, 1])*log(1-pi.hat)
log.m2 <- my.data[, 2]*log(phi.hat) + (1-my.data[, 1])*log(1-phi.hat)
est <- sum(log.m1 - log.m2)/n
std.div <- sum((log.m1 - log.m2)^2)/n - (est)^2
(z <- sqrt(n)*est/sqrt(std.div))
summary(fit1)
summary(fit2)
table(my.data[, 1], my.data[, 2])
n<- 100
my.data <- matrix(nrow = n, ncol = 2)
my.data[, 1] <- c(rep(1, 19), rep(4, 16), rep(7, 65))
prob <- expit(-1.6 + 1*as.numeric(my.data[, 1] > 3))
res <- NULL
for(i in 1:3000){
bad <- FALSE
my.data[, 2] <- rbinom(n, 1, prob)
for(j in 1:6){
if((table(my.data[,1], my.data[, 2])[j] <= 3)){
bad <- TRUE
}
}
if(bad == FALSE){
fit1 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 3)) , family = binomial)
fit2 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 6)) , family = binomial)
pi.hat <- fit1$fitted.values
phi.hat <- fit2$fitted.values
log.m1 <- my.data[, 2]*log(pi.hat) + (1-my.data[, 1])*log(1-pi.hat)
log.m2 <- my.data[, 2]*log(phi.hat) + (1-my.data[, 1])*log(1-phi.hat)
est <- sum(log.m1 - log.m2)/n
std.div <- sum((log.m1 - log.m2)^2)/n - (est)^2
z <- sqrt(n)*est/sqrt(std.div)
res[i] <- as.numeric(abs(z) > 1.96)
}else{
}
}
res2 <- NULL
count <- 1
for (i in 1:2000){
if(! is.na(res[i])){
res2[count]<- res[i]
count <- count + 1
}
}
mean(res2)
res <- NULL
for(i in 1:3000){
bad <- FALSE
my.data[, 2] <- rbinom(n, 1, prob)
for(j in 1:6){
if((table(my.data[,1], my.data[, 2])[j] <= 2)){
bad <- TRUE
}
}
if(bad == FALSE){
fit1 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 3)) , family = binomial)
fit2 <- glm(my.data[, 2] ~ as.numeric((my.data[, 1] > 6)) , family = binomial)
pi.hat <- fit1$fitted.values
phi.hat <- fit2$fitted.values
log.m1 <- my.data[, 2]*log(pi.hat) + (1-my.data[, 1])*log(1-pi.hat)
log.m2 <- my.data[, 2]*log(phi.hat) + (1-my.data[, 1])*log(1-phi.hat)
est <- sum(log.m1 - log.m2)/n
std.div <- sum((log.m1 - log.m2)^2)/n - (est)^2
z <- sqrt(n)*est/sqrt(std.div)
res[i] <- as.numeric(abs(z) > 1.96)
}else{
}
}
res2 <- NULL
count <- 1
for (i in 1:2000){
if(! is.na(res[i])){
res2[count]<- res[i]
count <- count + 1
}
}
mean(res2)
length(res)
length(res2)
